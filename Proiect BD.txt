
CREATE DATABASE agentie_turism;
USE agentie_turism;

-- client: id(PK), nume, prenume, email, data_nastere
CREATE TABLE client(
id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
nume VARCHAR(50) NOT NULL,
prenume VARCHAR(50) NOT NULL,
email VARCHAR(100) NULL,
data_nastere DATE NOT NULL
);

-- sejur: id(PK), denumire, tip, data_inceput, data_sfarsit, durata, locatie, pret_persoana, locuri_disponibile
CREATE TABLE sejur(
id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
denumire VARCHAR(100) NOT NULL,
tip ENUM('CIRCUIT', 'CITY BREAK', 'SABATOARE', 'EXCURSIE'),
data_inceput DATE NOT NULL,
data_sfarsit DATE NOT NULL,
durata TINYINT NOT NULL,
locatie VARCHAR(200) NOT NULL,
pret_persoana SMALLINT NOT NULL,
locuri_disponibile TINYINT NOT NULL
);

-- ghid: id(PK), nume, prenume, nivel_experinta, ranting
CREATE TABLE ghid(
id TINYINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
nume VARCHAR(50) NOT NULL,
prenume VARCHAR(50) NOT NULL,
nivel_experienta ENUM('INCEPATOR', 'MEDIU', 'AVANSAT', 'EXPERT') NOT NULL,
rating TINYINT NULL
);

-- pachet: id(PK), data_achizitie, masa, transport, nr_persoane, discount, asigurare, pret_final, id_client(PK), id_sejur(FK)
CREATE TABLE pachet(
id INT NOT NULL PRIMARY KEY auto_increment,
data_achizitie DATE NOT NULL,
masa ENUM('MIC DEJUN', 'DEMIPENSIUNE', 'PENSIUNE COMPLETA', 'ALL INCLUSIVE') NULL,
transport ENUM('INDIVIDUAL', 'AVION', 'AUTOCAR') NOT NULL,
nr_persoane TINYINT NOT NULL,
discount TINYINT,
asigurare BOOLEAN default 0,
pret_final DECIMAL NULL,
id_client INT NOT NULL,
id_sejur INT NOT NULL,
FOREIGN KEY(id_client) REFERENCES client(id),
FOREIGN KEY(id_sejur) REFERENCES sejur(id)
);

-- plata: id(PK), tip, avans, finalizata, termen, id_pachet(FK)
CREATE TABLE plata(
id INT NOT NULL PRIMARY KEY auto_increment,
tip ENUM('CASH', 'CARD', 'TRANSFER') NOT NULL,
avans TINYINT NOT NULL,
finalizata BOOLEAN NOT NULL,
termen DATE NULL,
id_pachet INT NOT NULL,
FOREIGN KEY(id_pachet) REFERENCES pachet(id)
);

-- adaug id_ghid in sejur si il setez ca FK
ALTER TABLE sejur
ADD COLUMN id_ghid TINYINT NULL;

ALTER TABLE sejur
ADD CONSTRAINT fk_ghid
FOREIGN KEY(id_ghid) REFERENCES ghid(id);

-- ghid: rating ar trebui sa fie decimal
ALTER TABLE ghid MODIFY COLUMN rating DECIMAL(3, 2);

-- plata: schimbam numele coloanei termen
ALTER TABLE plata CHANGE termen data_limita DATE;

-- sejur: stergem coloana durata
ALTER TABLE sejur DROP column durata;

INSERT INTO ghid (nume, prenume, nivel_experienta, rating) VALUES("Ion", "dan","INCEPATOR","4.8"),("Vasile", "butoi","MEDIU","4.95"),("Mari", "cazan","AVANSAT","4.73"),("Leana", "cap","EXPERT","4.81");










UPDATE pachet INNER JOIN sejur ON pachet.id_sejur = sejur.id SET pret_final = pret_persoana * nr_persoana * ((100 - discount) / 100);

UPDATE plata INNER JOIN pachet ON plata.id.pachet = pachet.id INNER JOIN sejur ON pachet.id_sejur = sejur.id SET data_limita = data_inceput - INTERVAL 2 WEEk;

-- completam automat adressele de email
-- prenume_nume1999@gmail.com
UPDATE client SET email = CONCAT(LOWER(prenume), '_', LOWER(nume), YEAR(data_nastere), '@gmail.com');



-- totate sejururile
SELECT * FROM sejur;


-- toate sejururile cu pret per persoana mai mic de 800
SELECT *
FROM sejur
WHERE pret_persoana < 700;

-- pachetele cu pret intre 1200 si 3000
SELECT * s
FROM pachet
WHERE pret_final >= 1200 AND pret_final <= 3000;

SELECT *
FROM pachet
WHERE pret_final BETWEEN 1200 AND 3000;

-- toate city break-urile ordonate dupa pret
SELECT *
FROM sejur
WHERE tip = 'CITY BREAK'
ORDER BY pret_persoana;

SELECT *
FROM sejur
WHERE tip = 'CITY BREAK'
ORDER BY pret_persoana, denumire;

-- rating min, max, avg, pt ghizi
SELECT
MIN(rating) rating_minim,
MAX(rating) raring_maxim,
AVG(rating) rating_mediu
FROM ghid;

-- numele sejurului si durata lui durata zile(datediff)
SELECT denumire, datediff(data_sfarsit, data_inceput) durata_zile
FROM sejur;

-- numele sejurului si durata lui durata zile(datediff)
SELECT denumire, datediff(data_sfarsit, data_inceput) durata_zile
FROM sejur
ORDER BY durata_zile;


-- sejururi cu weekend in denumire
SELECT *
FROM sejur
WHERE denumire LIKE '%Weekend%';

-- cel mai scump sejur/al doilea cel mai scump
SELECT *
FROM sejur
ORDER BY pret_persoana DESC
LIMIT 1;


-- cel mai scump sejur/al doilea cel mai scump
SELECT *
FROM sejur
ORDER BY pret_persoana DESC
LIMIT 1, 1;


-- numarul de plati finalizate/nefinalizate
SELECT finalizata, COUNT(*) nr_plati
FROM plata
GROUP BY finalizata;

-- numarul de plati finalizate/nefinalizate
SELECT IF(finalizata = 1, 'plata finalizata', 'plata nefinalizata') finalizata, COUNT(*) nr_plati
FROM plata
GROUP BY finalizata;

-- pretul total al pachetelor, grupat dupa transport
SELECT transport, SUM(pret_final)
FROM pachet
GROUP BY transport;

-- numele sejururilor, grupate dupa tip
SELECT tip, GROUP_CONCAT(denumire) lista_sejururi
FROM sejur
GROUP BY tip;

-- numarul sejururilor, grupate dupa tip, doar daca sunt mai mult de 3
SELECT tip, COUNT(*) nr
FROM sejur
GROUP BY tip
HAVING nr > 3;

-- numarul sejururilor, grupate dupa tip, cu pretul mai mare de 400
SELECT tip, COUNT(*)
FROM sejur
WHERE pret_persoana > 400
GROUP BY tip;


-- numarul sejururilor, grupate dupa tip, doar daca sunt mai mult de 2 si anul inceperii este 2021
SELECT tip, COUNT(*) nr
FROM sejur
WHERE YEAR(data_inceput) = 2021
GROUP BY tip
HAVING nr > 2;

-- pretul mediu pentru excursie si circuit, dar numai daca este peste 850
SELECT tip, AVG(pret_persoana) pret_mediu
FROM sejur
WHERE tip IN ('EXCURSIE', 'CIRCUIT')
GROUP BY tip
HAVING pret_mediu > 850;

-- data achizitie pachet, masa, transport si numele sjurului
SELECT data_achizitie, masa, transport, denumire
FROM pachet JOIN sejur
ON pachet.id_sejur = sejur.id;

-- numele sejurului, data inceput, data sfarsit si numele ghidului
SELECT denumire, data_inceput, data_sfarsit, CONCAT(nume, ' ', prenume) ghid
FROM sejur JOIN ghid
ON sejur.id_ghid = ghid.id;

-- id pachet, data achizitie a pachetului si termenul limita al platii
SELECT pachet.id, data_achizitie, data_limita
FROM pachet, plata
WHERE pachet.id = plata.id_pachet;

-- numele client, nume sejur, masa, transport, pentru pachetele cu cel putin 3 persoane
SELECT CONCAT(nume, ' ', prenume) client, denumire, masa, transport
FROM client JOIN pachet ON client.id = pachet.id_client
JOIN sejur ON sejur.id = pachet.id_sejur
WHERE nr_persoane >= 3;

-- nume client, nume sejur, nume ghid pentru city breaks
SELECT CONCAT(client.nume, ' ', client.prenume) client, denumire, CONCAT(ghid.nume, ' ', ghid.prenume) ghid
FROM client, sejur, pachet, ghid
WHERE
client.id = pachet.id_client AND
sejur.id = pachet.id_sejur AND
ghid.id = sejur.id_ghid AND
tip = 'CITY BREAK';

-- numele client, care pachete a achizitionat
SELECT concat(client.nume, ' ', client.prenume) client, COUNT(*)
FROM client, pachet
WHERE client.id = pachet.id_client
GROUP BY client;

SELECT concat(client.nume, ' ', client.prenume) client, COUNT(*) nr
FROM client, pachet
WHERE client.id = pachet.id_client
GROUP BY client
ORDER BY nr DESC;

SELECT denumire, group_concat(CONCAT(client.nume, ' ', client.prenume)) lista_clienti
FROM sejur, client, pachet
WHERE 
sejur.id = pachet.id_sejur AND
client.id = pachet.id_client
GROUP BY denumire;

-- nume sejur si o lista cu numele clientilor
SELECT denumire, GROUP_CONCAT(CONCAT(client.nume, ' ', client.prenume)) lista_clienti
FROM sejur, client, pachet
WHERE
sejur.id = pachet.id_sejur AND 
client.id = pachet.id_client
GROUP BY denumire; 

-- sejururile de tip city break care au fost achizitionate de cel putin 2 ori
SELECT denumire, COUNT(*) nr
FROM sejur JOIN pachet
ON sejur.id = pachet.id_sejur
WHERE tip = 'CITY BREAK'
GROUP BY denumire
HAVING nr >= 2;

-- nume ghid si lista de sejururi, daca exista
SELECT CONCAT(nume, ' ', prenume) ghid, GROUP_CONCAT(denumire)
FROM sejur RIGHT JOIN ghid
ON sejur.id_ghid = ghid.id
GROUP BY ghid;

-- ghizi fara sejururi
SELECT CONCAT(nume, ' ', prenume) ghid
FROM sejur RIGHT JOIN ghid
ON sejur.id_ghid = ghid.id
WHERE denumire IS NULL;

-- sejururile care nu au fost achizitionate niciodata
SELECT denumire
FROM sejur LEFT JOIN pachet
ON sejur.id = pachet.id_sejur
WHERE pachet.id IS NULL;

-- sejururile cu acelasi tip ca 4
SELECT *
 FROM sejur
 WHERE tip = (SELECT tip FROM sejur WHERE id = 4);

-- sejururile cu pretul mai mare decat pret mediu
SELECT *
FROM sejur
WHERE pret_persoana > (SELECT AVG(pret_persoana) FROM sejur);

-- sejururile cu acelasi tip si data inceput ca cel cu id-ul 2
SELECT 
FROM sejur
WHERE (tip, data_inceput) = (SELECT, tip, data_inceput FROM sejur WHERE id = 2);

-- pachetele cu acelasi tip de transport si nr de persoane ca 5
SELECT * 
FROM pachet
WHERE (transport, nr_persoane) = (SELECT transport, nr_persoane FROM pachet WHERE id = 5); --lista

-- ghizii pentru circuite
SELECT *
FROM ghid
WHERE id IN (SELECT id_ghid FROM sejur WHERE tip = 'CIRCUIT'); 

-- pachetele de tip city BREAK
SELECT *
FROM pachet
WHERE id_sejur IN (SELECT id FROM sejur WHERE tip = 'CITY BREAK');

-- denumirea si masa pentru pachetele cu excursii
-- tabela
SELECT denumire, masa
FROM pachet JOIN (SELECT id, denumire FROM sejur WHERE tip = 'EXCURSIE') excursie
ON pachet.id_sejur = excursie.id;

-- detalii sejururi italia: locatie, data inceput, data sfarsit, pret_persoana
-- VIEW
CREATE VIEW sejur_italia AS
SELECT locatie, data_inceput, data_sfarsit, pret_persoana
FROM sejur
WHERE locatie LIKE '%Italia%';

SELECT * FROM sejur_italia;

-- nume client, denumire pachet, data inceput, pret, tip plata
CREATE VIEW detalii_comanda AS
SELECT nume, prenume, denumire, data_inceput, data_sfarsit, pret_final, plata.tip tip_plata
FROM client, sejur, pachet, plata
WHERE
client.id = pachet.id_client AND
sejur.id = pachet.id_sejur AND
pachet.id = plata.id_pachet;

SELECT * FROM detalii_comanda;

-- detalii pachet:locatie, pret, concatenate
 DELIMITER //
 CREATE FUNCTION detalii_pachet(id INT0 RETURN VARCHAR(200)
 BEGIN
	DECLARE resultat VARCHAR(200);
	SELECT CONCAT(locatie, ': ', pret_final) INTO rezultat
	FROM sejur JOIN pachet
	ON sejur.id = pachet.id_sejur
	WHERE pachet.id = id;
	
	RETURN rezultat;
END;
//
DELIMITER ;

SELECT detalii_pachet(1);

-- calculeaza discount: 5% daca a luat mai mult de 3 pachete+10%daca il ia de ziua lui
DELIMITER //
CREATE FUNCTION calculeaza_discount(id_pachet INT) RETURN TINYINT
BEGIN
	DECLARE discount TINYINT DEFAULT 0;
    DECLARE nr_pachete TINYINT;
    DECLARE zi_nastere INT;
    DECLARE luna_nastere INT;
	
	SELECT COUNT(*) INTO nr_pachete
    FROM pachet
    WHERE id_client = (SELECT id_client FROM pachet WHERE id = id_pachet);
	
	SELECT DAY(data_nastere), MONTH(data_nastere) INTO zi_nastere, luna_nastere
    FROM client
    WHERE id = (SELECT id_client FROM pachet WHERE id = id_pachet);
	
	IF nr_pachete > 3 THEN
		SET discount = discount + 5;
	END IF;
	
	IF DAY(CURDATE()) = zi_nastere AND MONTH(CURDATE()) = luna_nastere THEN
		SET discount = discount + 10;
	END IF;
	
	RETURN discount;
END;
//
DELIMITER


SELECT calculeaza_discount();
SELECT calculeaza_discount(1);
SELECT calculeaza_discount(17);
-- pt un pachet, detalii plata: nume client, nume sejur, daca s-a facut plata integral sub forma de mesaj (gigel a platit pentru sejur integral//avans x%)
DELIMITER //
CREATE FUNCTION mesaj_plata(id_pachet INT) RETURNS VARCHAR(500)
BEGIN
	DECLARE rezultat VARCHAR(500);
    DECLARE nume_client VARCHAR(100);
    DECLARE avans TINYINT;
    DECLARE sejur VARCHAR(50);
    
    SELECT CONCAT(nume, ' ', prenume), plata.avans, denumire INTO nume_client, avans, sejur
    FROM client, pachet, sejur, plata
    WHERE
    client.id = pachet.id_client AND
    sejur.id = pachet.id_sejur AND
    pachet.id = plata.id_pachet AND
    pachet.id = id_pachet;
    
    IF avans = 100 THEN
		SET rezultat = CONCAT_WS(' ', nume_client, 'a platit pentru', sejur, 'suma integrala');
	ELSE
		SET rezultat = CONCAT_WS(' ', nume_client, 'a platit pentru', sejur, avans, '%');
	END IF;
    
    RETURN rezultat;
END;
//
DELIMITER ;

SELECT mesaj_plata(1);
SELECT mesaj_plata(2);
SELECT mesaj_plata(7);


-- detalii pachet: nume client, locatie, data inceput, pret 
DELIMITER //
CREATE PROCEDURE detalii_pachet(IN id_pachet INT)
BEGIN
	SELECT CONCAT(nume, ' ', prenume) client, locatie, data_inceput, pret_final
    FROM 
    client JOIN pachet ON client.id = pachet.id_client
    JOIN sejur ON sejur.id = pachet.id_sejur
    WHERE pachet.id = id_pachet; 
END;
//
DELIMITER ;

CALL detalii_pachet(7);

-- actualizeaza pret: pret_persoana*nr_persoane + 200*nr_persoane daca e all inclusive - 50*nr_persoane daca ee transport individual, 
	-- la care aplicam si disocunt
	DELIMITER //
CREATE PROCEDURE actualizeaza_pret(IN id_pachet INT)
BEGIN
	DECLARE pret_persoana INT;
    DECLARE nr_persoane TINYINT;
    DECLARE masa VARCHAR(50);
    DECLARE transport VARCHAR(50);
    DECLARE pret INT;
    DECLARE discount TINYINT;
    
    SELECT sejur.pret_persoana, pachet.nr_persoane, pachet.masa, pachet.transport, sejur.pret_persoana*pachet.nr_persoane, pachet.discount
    INTO pret_persoana, nr_persoane,masa, transport, pret, discount
    FROM pachet JOIN sejur ON pachet.id_sejur = sejur.id
    WHERE pachet.id = id_pachet;
    
    IF masa = 'ALL INCLUSIVE' THEN
		SET pret = pret + (200*nr_persoane);
	END IF;
    
    IF transport = 'INDIVIDUAL' THEN
		SET pret = pret - (50*nr_persoane);
	END IF;
    
    SET pret = pret * ((100-discount)/100);
    
    UPDATE pachet SET pret_final = pret WHERE id = id_pachet;
END;
//
DELIMITER ;     

CALL actualizeaza_pret(1);
	
-- pret total: nume client, cat a platit pe pachete pana acum 

DELIMITER //
CREATE PROCEDURE pret_total(IN nume_complet VARCHAR(100), OUT pret INT)
BEGIN
	SELECT SUM(pret_final) INTO pret
    FROM pachet JOIN client ON client.id = pachet.id_client
    WHERE CONCAT(nume, ' ', prenume) = nume_complet;
END;
//
DELIMITER ;

CALL pret_total('Pittman Ian', @pret_pachete);
SELECT @pret_pachete;

create table platit_integral(
	id int not null primary key auto_increment,
    id_pachet int not null,
    nume_client varchar(100) not null,
    nume_sejur varchar(50) not null,
    data_inceput date not null,
    foreign key(id_pachet) references pachet(id)
);

DELIMITER //
CREATE PROCEDURE populeaza_platit_integral()
BEGIN
	DECLARE id_pachet INT;
    DECLARE nume_client VARCHAR(50);
    DECLARE nume_sejur VARCHAR(50);
    DECLARE data_inceput DATE;
    DECLARE avans TINYINT;
    
    DECLARE ok TINYINT DEFAULT 1;
    DECLARE cursor_pachete CURSOR FOR
		SELECT pachet.id, CONCAT(nume, ' ', prenume), denumire, sejur.data_inceput, plata.avans
        FROM pachet, sejur, client, plata
        WHERE 
        pachet.id = plata.id_pachet AND
        sejur.id = pachet.id_sejur AND
        client.id = pachet.id_client;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET ok = 0;
    OPEN cursor_pachete;
    
    TRUNCATE platit_integral;
    pachete: LOOP
		FETCH cursor_pachete INTO id_pachet, nume_client, nume_sejur, data_inceput, avans;
        IF ok = 0 THEN
			LEAVE pachete;
		ELSE
			IF avans = 100 THEN
				INSERT INTO platit_integral VALUES(NULL, id_pachet, nume_client, nume_sejur, data_inceput);
			END IF;
        END IF;
    END LOOP pachete;
    
    CLOSE cursor_pachete;
END;
//
DELIMITER ;

CALL populeaza_platit_integral();
SELECT * FROM platit_integral;








-- lista cu sejur:ghid->pret pentru un anumit tip de sejur, unde pretul este cu 10% mai mic daca ghidul este incepator
DELIMITER //
CREATE FUNCTION lista_sejur(tip VARCHAR(50)) RETURNS TEXT
BEGIN
	DECLARE nume_ghid VARCHAR(100);
    DECLARE sejur VARCHAR(50);
    DECLARE pret INT;
    DECLARE experienta VARCHAR(50);
    DECLARE detalii_sejur VARCHAR(300);
    DECLARE rezultat TEXT;
    DECLARE ok TINYINT DEFAULT 1;
    
    DECLARE cursor_sejururi CURSOR FOR
		SELECT CONCAT(nume, ' ', prenume), nivel_experienta, pret_final, denumire
        FROM ghid, sejur, pachet
        WHERE 
        ghid.id = sejur.id_ghid AND
        sejur.id = pachet.id_sejur AND
        sejur.tip = tip;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET ok = 0;
    OPEN cursor_sejururi;
    sejururi: LOOP
		FETCH cursor_sejururi INTO nume_ghid, experienta, pret, sejur;
        IF ok = 0 THEN
			LEAVE sejururi;
		ELSE
			IF experienta = 'INCEPATOR' THEN
				SET pret = pret*0.9;
			END IF;
            SET detalii_sejur = CONCAT(sejur, ': ', nume_ghid, '->', pret);
            SET rezultat = CONCAT_WS('//', rezultat, detalii_sejur);
        END IF;
    END LOOP sejururi;
    CLOSE cursor_sejururi;
    
    RETURN rezultat;
END;
//
DELIMITER ;

SELECT lista_sejur('EXCURSIE');
-- Zakynthos: Brown Zeus->2736//Zakynthos: Brown Zeus->1296//Zakynthos: Brown Zeus->648//Zakynthos: Brown Zeus->1325//Zakynthos: Brown Zeus->3384//Zakynthos: Brown Zeus->1325//Bansko: Brown Zeus->1720//Bansko: Brown Zeus->2898//Croatia: Avery Riley->580//Croatia: Avery Riley->2930//Croatia: Avery Riley->599//Croatia: Avery Riley->2993//Croatia: Avery Riley->1701


-- lista cu client->nume sejur, pentru un tip de sejur daca nr persoane este mai mare de x//nr persoane se verifica in cursor
DELIMITER //
CREATE FUNCTION client_sejur(tip_sejur VARCHAR(50), nr_pers TINYINT) RETURNS TEXT
BEGIN
	DECLARE client VARCHAR(100);
    DECLARE sejur VARCHAR(50);
    DECLARE nr TINYINT;
    DECLARE rezultat TEXT;
    DECLARE ok TINYINT DEFAULT 1;
    DECLARE cursor_clienti CURSOR FOR
		SELECT CONCAT(nume, ' ', prenume), denumire, nr_persoane
        FROM client JOIN pachet ON client.id = pachet.id_client JOIN sejur ON sejur.id = pachet.id_sejur
        WHERE tip = tip_sejur;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET ok = 0;
    
    OPEN cursor_clienti;
    clienti: LOOP
		FETCH cursor_clienti INTO client, sejur, nr;
        IF ok = 0 THEN
			LEAVE clienti;
		ELSE 
			IF nr > nr_pers THEN
				SET rezultat = CONCAT_WS('//', rezultat, CONCAT(client, '->', sejur));
			END IF;
		END IF;
    END LOOP clienti;
    
    CLOSE cursor_clienti;
    RETURN rezultat;
END;
//
DELIMITER ;

SELECT client_sejur('EXCURSIE', 3);
-- Estes Brian->Bansko//Wilder Damian->Croatia//Wilder Damian->Zakynthos//Glass Cooper->Zakynthos//Spears Lawrence->Croatia



create table log_sejur(
	id int not null primary key auto_increment,
    id_sejur int not null,
    eveniment varchar(100) not null,
    detalii text,
    foreign key(id_sejur) references sejur(id)
); 



-- dupa update de ghid facem insert in log_sejur: ghid schimbat, ghid vechi -> ghid nou
DELIMITER //
CREATE OR REPLACE TRIGGER au_sejur AFTER UPDATE
ON sejur FOR EACH ROW
BEGIN
	DECLARE ghid_vechi VARCHAR(100);
	DECLARE ghid_nou VARCHAR(100);
    IF OLD.id_ghid != NEW.id_ghid THEN
		SELECT CONCAT(nume, ' ', prenume) INTO ghid_vechi FROM ghid WHERE id = OLD.id_ghid;
		SELECT CONCAT(nume, ' ', prenume) INTO ghid_nou FROM ghid WHERE id = NEW.id_ghid;
        INSERT INTO log_sejur VALUES(NULL, NEW.id, 'ghid schimbat', CONCAT(ghid_vechi, ' -> ', ghid_nou));
	END IF;
END;
//
DELIMITER ;
UPDATE sejur SET id_ghid = 1 WHERE id = 3;
SELECT * FROM log_sejur;
-- inainte de insert verificam daca mai sunt locuri disponibile si daca nu dam eroare
DELIMITER //
CREATE TRIGGER bi_pachet BEFORE INSERT
ON pachet FOR EACH ROW
BEGIN
	DECLARE nr_locuri TINYINT;
    DECLARE locuri_ocupate TINYINT;
    DECLARE eroare TEXT;
    
    SELECT locuri_disponibile INTO nr_locuri FROM sejur WHERE id = NEW.id_sejur;
    SELECT SUM(nr_persoane) INTO locuri_ocupate FROM pachet WHERE pachet.id_sejur = NEW.id_sejur;
    
    IF NEW.nr_persoane > (nr_locuri - locuri_ocupate) THEN
		SET eroare = CONCAT('mai sunt doar ', nr_locuri - locuri_ocupate, ' locuri disponibile');
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = eroare;
	END IF;
END;
//
DELIMITER ;

INSERT INTO pachet (data_achizitie,masa,transport,nr_persoane,discount,asigurare,id_client,id_sejur) 
VALUES ("2021-07-02 ","MIC DEJUN","AUTOCAR",1,6,"1",10,5);

-- inainte de a sterge un ghid punem in sejur id_ghid = null
DELETE FROM ghid WHERE id = 12;
DELIMITER //
CREATE TRIGGER bd_ghid BEFORE DELETE
ON ghid FOR EACH ROW
BEGIN
	UPDATE sejur SET id_ghid = NULL WHERE id_ghid = OLD.id;
END;
//
DELIMITER ;

DELETE FROM ghid WHERE id = 12;
SELECT * FROM sejur;































